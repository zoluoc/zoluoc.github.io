<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zoluo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.corkercode.com/"/>
  <updated>2019-01-27T12:00:35.872Z</updated>
  <id>https://www.corkercode.com/</id>
  
  <author>
    <name>zoluo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis5.x版本搭建高可用集群（HA）</title>
    <link href="https://www.corkercode.com/2019/01/16/Redis5-x%E7%89%88%E6%9C%AC%E6%90%AD%E5%BB%BA%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%EF%BC%88HA%EF%BC%89/"/>
    <id>https://www.corkercode.com/2019/01/16/Redis5-x版本搭建高可用集群（HA）/</id>
    <published>2019-01-16T15:21:30.000Z</published>
    <updated>2019-01-27T12:00:35.872Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单机环境搭建"><a href="#单机环境搭建" class="headerlink" title="单机环境搭建"></a>单机环境搭建</h3><blockquote><p>单机环境仅供我们平时开发和测试时使用，一般我们可能会在 Linux 或者 Windows 上部署，Windows版本的部署非常简单，首先在 GitHub 上下载 zip 包解压到指定位置，后执行下面的命令就成功的部署好了。下载地址 <a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="noopener">Redis GitHub 下载地址</a></p></blockquote><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-server.exe redis.windows.config</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>运行成功如下图<br><img src="http://upload-images.jianshu.io/upload_images/7269465-e0b6c83daf237c6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Windows Redis"></p><blockquote><p>Linux 版本安装如下</p></blockquote><p>1.主机名修改<br>hostnamectl –static set-hostname  redis1</p><p>2.安装gcc  yum install gcc<br>检查是否安装 gcc -v</p><p>3.下载 Redis gz 安装包<br>到 <a href="https://redis.io/download" target="_blank" rel="noopener">Redis 官网</a>下载安装包，也可使用一下命令直接下载到服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-5.0.3.tar.gz  #远程下载</span><br></pre></td></tr></table></figure></p><p>下载完成后解压到 <strong>/usr/local</strong> 目录下<br>修改 <strong>/usr/local/redis-5.0.3/redis.conf</strong> 参数 daemonize 值改为 yes，使其后台运行，启动命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis-5.0.3/src/redis-server /usr/local/redis-5.0.3/redis.conf #指定配置文件</span><br></pre></td></tr></table></figure></p><p>4.验证单机环境</p><ul><li>验证启动是否成功   ps -ef | grep redis  </li><li>进入redis客户端   /usr/local/redis-5.0.3/src/redis-cli  </li><li>存数据 set name zoluo</li><li>取数据 get name</li><li>退出客户端  quit 或 Ctrl + C 或 exit</li><li>退出redis服务：<br>（1）pkill redis-server<br>（2）kill -9 进程号</li></ul><h3 id="高可用集群环境搭建"><a href="#高可用集群环境搭建" class="headerlink" title="高可用集群环境搭建"></a>高可用集群环境搭建</h3><h4 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h4><p>在 Redis3.0 以前的版本要实现集群一般是借助哨兵 sentinel 工具来监控master节点的状态， 如果 master 节点异常，则会做主从切换，将某一台 slave 作为 master，哨兵的配置略微复 杂，并且性能和高可用性等各方面表现一般，特别是在主从切换的瞬间存在访问瞬断的情 况，而且哨兵模式只有一个主节点对外提供服务，没法支持很高的并发，且单个主节点内存 也不宜设置得过大，否则会导致持久化文件过大，影响数据恢复或主从同步的效率。<br>参考：</p><ul><li><a href="https://blog.csdn.net/py_tamir/article/details/82555338" target="_blank" rel="noopener">Redis 中哨兵sentinel 机制、从宕机及恢复、主库宕机及恢复解决方案</a></li><li><a href="https://www.cnblogs.com/gdpuzxs/p/6659873.html" target="_blank" rel="noopener">redis哨兵模式</a><h4 id="高可用集群模式"><a href="#高可用集群模式" class="headerlink" title="高可用集群模式"></a>高可用集群模式</h4>1.概述<br>Redis 的集群主要是使用切片技术来搭建的，简单来说就是把所有KEY分散存放到不同的redis节点上（不要把鸡蛋都放在一个篮子里）。</li></ul><p>2.说明<br>Redis 集群是一个由多个主从节点群组成的分布式服务器群，它具有复制、高可用和分片特 性。Redis 集群不需要 sentinel 哨兵也能完成节点移除和故障转移的功能。需要将每个节点 设置成集群模式，这种集群模式没有中心节点，可水平扩展，据官方文档称可以线性扩展到 上万个节点(官方推荐不超过 1000 个节点)。Redis 集群的性能和高可用性均优于之前版本的 哨兵模式，且集群配置非常简单 。</p><p>3.集群基本原理<br>Redis 集群中内置了 16384 个槽位，当需要放置数据时，Redis 先对 KEY 使用 CRC16 算法计算出一个结果，然后把结果对 16384 求余数，这样每个 KEY 都会对应一个编号在 0-16383 之间的槽号码，Redis 会根据节点数量大致均等的原则将哈希槽映射到不同节点。比如有 3 个 Redis 节点，把 16384 分成 3 段，每个节点承担一段范围的哈希槽。在一个集群中16384个槽位必须同时在线否则集群就会失败。</p><p>优点是添加和移除节点非常容易。比如要新增一个节点，值需要从其他节点上移动一些槽位到新节点即可，如果要删除一个节点，那就把它拥有的槽位移动到其他节点，然后进行删除。上面这种移动过程不需要任何停机时间。</p><p>所有的 Redis 节点彼此互通</p><ul><li>节点的失败是通过集群中超过半数的节点检测失效才生效的</li><li>客户端与 Redis 节点直连，不需要中间的代理，客户端不需要连接集群所有节点，只需要连接任何一个可用的节点即可</li></ul><p>4.Redis 高可用集群搭建<br>Redis 集群需要至少要三个 master 节点，我们这里使用三台虚拟机搭建三个 master 节点，并且给每个 master 再搭建一个slave 节点，总共6个 Redis 节点，这里用三台机器部署6个 Redis 实例，<br>每台机器一主一从，搭建集群的步骤如下：</p><p>第一步：在每台机器的 /usr/local 下创建文件夹 <strong>redis-cluster</strong>，然后在其下面分别创建 2 个文件夹如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$redis1</span><br><span class="line">mkdir -p /usr/local/redis-cluster  </span><br><span class="line">mkdir 7001</span><br><span class="line">mkdir 7002 </span><br><span class="line">$redis2</span><br><span class="line">mkdir -p /usr/local/redis-cluster  </span><br><span class="line">mkdir 7003</span><br><span class="line">mkdir 7004 </span><br><span class="line">$redis3</span><br><span class="line">mkdir -p /usr/local/redis-cluster  </span><br><span class="line">mkdir 7005</span><br><span class="line">mkdir 7006</span><br></pre></td></tr></table></figure></p><p>第二步：把之前的 /usr/local/redis-5.0.3/redis.conf 配置文件 copy 到每个 700* 下，修改如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">（1）daemonize yes  </span><br><span class="line">（2）port 7001 #分别对每个机器的端口号进行设置  </span><br><span class="line">（3）dir /usr/local/redis-cluster/7001/ #指定数据文件存放位置，必须要指定不同的目录位置，不然会丢失数据</span><br><span class="line">（4）cluster-enabled yes #启动集群模式 </span><br><span class="line">（5）cluster-config-file nodes-7001.conf #集群节点信息文件，这里 700* 和port对应上  </span><br><span class="line">（6）cluster-node-timeout 5000   </span><br><span class="line">（7)  # bind 127.0.0.1 #去掉bind绑定访问ip信息</span><br><span class="line">（8) protected-mode  no  #关闭保护模式  </span><br><span class="line">（9）appendonly yes  #如果要设置密码需要增加如下配置： </span><br><span class="line">         requirepass zoluo  #设置redis访问密码</span><br><span class="line">         masterauth zoluo  #设置集群节点间访问密码，跟上面一致</span><br></pre></td></tr></table></figure></p><p>第三步：另外两台机器修改第2、3、5项里的端口号</p><p>第四步：分别启动6个redis实例，然后检查是否启动成功，命令如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis-5.0.3/src/redis-server /usr/local/redis-cluster/700*/redis.conf  </span><br><span class="line">ps -ef | grep redis #查看是否启动成功</span><br></pre></td></tr></table></figure></p><p>第五步：用 redis-cli 创建整个 Redis 集群(<strong>Redis 5.x以前的版本集群是依靠 ruby 脚本 redistrib.rb 实现</strong>)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis-5.0.3/src/redis-cli -a sinopec --cluster create --cluster-replicas 1 10.18.2.156:7001 10.18.2.160:7004 10.18.2.160:7003 10.18.2.187:7006 10.18.2.187:7005 10.18.2.156:7002 192.168.0.63:8006 #代表为每个创建的主服务器节点创建一个从服务器节点</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/7269465-48e11219eb7bc74b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="加入集群"><br>第六步：验证集群：<br>（1）连接任意一个客户端即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#./redis-cli -c -h -p (-a访问服务端密码，-c表示集群模 式，指定ip地址和端口号）</span><br><span class="line">/usr/local/redis-5.0.3/src/redis-cli -a zoluo-c -h  10.18.2.160 -p 700*  </span><br><span class="line">cluster infoc #查看集群信息</span><br><span class="line">cluster nodes #查看节点列表 </span><br><span class="line">#进行数据操作验证</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/7269465-7e1e0fe8a15432b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="节点信息"><br>（2）关闭集群则需要逐个进行关闭，使用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis-5.0.3/src/redis-cli -a zoluo -c -h 10.18.2.160 -p 700* shutdown</span><br></pre></td></tr></table></figure></p><p>自此 Redis 高可用集群搭建完毕！参考：<br><a href="https://www.cnblogs.com/yunxizhujing/articles/9750670.html" target="_blank" rel="noopener">Redis 集群详解</a><br><a href="https://redis.io/commands/cluster-nodes" target="_blank" rel="noopener">Redis 官方说明</a></p><h5 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h5><p>1.Redis 集群节点加入顺序与主节点与从节点关联是随机的，参考官方说明。<br>2.如果在安装过程中出现不可逆转的错误或安装失败，最好重新安装。<br>重新安装我要做关键的两步：</p><ul><li><p>关闭集群</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis-5.0.3/src/redis-cli -a zoluo -c -h 10.18.2.160 -p 700* shutdown</span><br><span class="line">或</span><br><span class="line">kill -9 进程号</span><br></pre></td></tr></table></figure></li><li><p>删除每台机器上数据文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/redis-cluster/700*/</span><br><span class="line">rm -rf appendonly.700*.aof</span><br><span class="line">rm -rf nodes.700*.conf</span><br></pre></td></tr></table></figure></li><li><p>重复操作上面 4、5、6 步骤，当然如果需要修改端口，按照每台机器不重复修改就行了。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;单机环境搭建&quot;&gt;&lt;a href=&quot;#单机环境搭建&quot; class=&quot;headerlink&quot; title=&quot;单机环境搭建&quot;&gt;&lt;/a&gt;单机环境搭建&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;单机环境仅供我们平时开发和测试时使用，一般我们可能会在 Linux 或者 Windows 上部署，Windows版本的部署非常简单，首先在 GitHub 上下载 zip 包解压到指定位置，后执行下面的命令就成功的部署好了。下载地址 &lt;a href=&quot;https://github.com/MicrosoftArchive/redis/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Redis GitHub 下载地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="高可用架构" scheme="https://www.corkercode.com/categories/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="redis" scheme="https://www.corkercode.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客建站一〈基础搭建〉</title>
    <link href="https://www.corkercode.com/2018/05/15/Hexo%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99%E4%B8%80%E3%80%88%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA%E3%80%89/"/>
    <id>https://www.corkercode.com/2018/05/15/Hexo博客建站一〈基础搭建〉/</id>
    <published>2018-05-15T01:32:37.000Z</published>
    <updated>2019-01-27T12:00:35.872Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>搭建个人博客前面提到了有很多种，我采用的是 Hexo 静态博客，Next 主题。<br>在这里 Hexo Next 就不做详细介绍了，官网地址戳这里 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next</a><br>官方网站对安装与配置进行了详细的介绍，包括站点配置主题配置，<br>后面我针对需要的部分进行配置与说明。<br>下面是我搭建的详细过程。</p></blockquote><a id="more"></a><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li><p>电脑以及拥有可用的系统，可上网，Windows、Linux、Mac Os 都可以</p></li><li><p>Git客户端安装<br><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git 客户端下载</a><br><img src="https://upload-images.jianshu.io/upload_images/7269465-75b2ecb6f918c1ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"><br>点击安装，安装完成如下图<br><img src="https://upload-images.jianshu.io/upload_images/7269465-4c8c9c0964cc11c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p></li><li><p>Node.js安装</p></li></ol><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node 下载</a><br><img src="https://upload-images.jianshu.io/upload_images/7269465-05cab7f82dc2b7c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"><br>点击安装，安装完成如下图<br><img src="https://upload-images.jianshu.io/upload_images/7269465-7aa2192f9969a621.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ol start="4"><li>远程代码仓库 Github、Coding都行，这里我选择Github</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/7269465-45f4a43b9a2215ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"><br>这里需注意仓库名必须是 <strong>username.github.io</strong></p><ol start="5"><li>可解析域名准备一个，暂时没有的可不用，我自己买了一个国际域名 <strong>corkercode.com</strong></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/7269465-d0b59af24cb3bfec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><h4 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h4><p>官网上已经有详细的安装说明了，这里记录下关键必须的步骤。<br>当以上所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo，以下所有步骤都在自己建的目录下进行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo --save</span><br></pre></td></tr></table></figure></p><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>新建完成后，指定文件夹的目录如下：<br><img src="https://upload-images.jianshu.io/upload_images/7269465-2d46b6e15adf02a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"><br>这个时候你运行以下命令就可以看到博客框架已搭建起来了访问 <a href="https://http:localhost:4000/" target="_blank" rel="noopener">博客主页</a>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/7269465-0952d5af9679df95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h4 id="next安装"><a href="#next安装" class="headerlink" title="next安装"></a>next安装</h4><p>可以看到上面博客主题不是自己喜欢的样子，别着急，github上给我提供了很多主题样式，地址在这里，自己选择，配置大同小异，我选用next。<br>在终端窗口下，定位到 Hexo 站点目录下。使用 Git checkout 代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p><p>这时在本地终端上Ctrl+c，结束正在运行的进程，并修改站点配置文件主题为next<br>重新执行上面的命令，可以看到成功的切换到了我们喜欢的主题了。<br><img src="https://upload-images.jianshu.io/upload_images/7269465-e954056c8d552acb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"><br>但是和别人的主题比起来还是有一些逊色，不着急，这些都是可以一步一步的配置的，不过我这里注重原创内容创造，对内容上面的配置会更加注重，后面我也会尽量添加一些样式的配置，大家可参考参考。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;搭建个人博客前面提到了有很多种，我采用的是 Hexo 静态博客，Next 主题。&lt;br&gt;在这里 Hexo Next 就不做详细介绍了，官网地址戳这里 &lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; &lt;a href=&quot;http://theme-next.iissnan.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Next&lt;/a&gt;&lt;br&gt;官方网站对安装与配置进行了详细的介绍，包括站点配置主题配置，&lt;br&gt;后面我针对需要的部分进行配置与说明。&lt;br&gt;下面是我搭建的详细过程。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="个人博客" scheme="https://www.corkercode.com/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://www.corkercode.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>个人博客</title>
    <link href="https://www.corkercode.com/2018/05/14/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://www.corkercode.com/2018/05/14/个人博客/</id>
    <published>2018-05-14T09:32:37.000Z</published>
    <updated>2019-01-27T12:00:35.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建个人博客的想法"><a href="#搭建个人博客的想法" class="headerlink" title="搭建个人博客的想法"></a>搭建个人博客的想法</h2><p>作为一个程序员时不时会看到和想到一些好的文章和观点，有时候还有些漂亮的代码段，想记录下来的方式很多，以前本人使用印象笔记来记录点滴。直到2017年初有了建立博客的想法，最开始自己想使用 Java web 来开发一个 Blog 以及后台管理，v1.0.0 版本也发布出来了，但是个人感觉丑死了，后台使用包 Bootstrap 还好一些，而且没有评论和计数的功能，所以就放弃使用了。后来在网上找了一些第三方的静态 Blog 搭建的方案，最后还是确定使用 Hexo 静态博客和 Next 主题来搭建。</p><a id="more"></a><h2 id="搭建博客的方式"><a href="#搭建博客的方式" class="headerlink" title="搭建博客的方式"></a>搭建博客的方式</h2><p>搭建博客的方式有很多种，网上也有很多实例如 Wordpress、Z-blog等，我看了几种感觉都感觉不是很合适，最后看到的 Hexo 搭配 GitHub Pages搭建静态博客网站感觉还是挺好的，有很多主题可自己选择，还有很多插件也可以安装，所以就选择了这种方式来搭建我的个人博客。<br>由于搭建博客的过程听起来简单但还是对于一些新人或非程序员来说还是有些不便，后面我会出一个系列文章来指导大家——如何搭建出优美的个人博客。</p><h2 id="搭建博客的目的"><a href="#搭建博客的目的" class="headerlink" title="搭建博客的目的"></a>搭建博客的目的</h2><p>时间不等人，知识学了会忘，blog不仅可以记录你生活的点滴还能帮助你成长，能让别人来见证你的过程，还能帮助别人解决困难……所以我决定开始属于自己的 Blog。<br>后面我会不定时的更新博客内容，诚邀大家一起指点记录 <a href="https://www.corkercode.com">zoluo</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;搭建个人博客的想法&quot;&gt;&lt;a href=&quot;#搭建个人博客的想法&quot; class=&quot;headerlink&quot; title=&quot;搭建个人博客的想法&quot;&gt;&lt;/a&gt;搭建个人博客的想法&lt;/h2&gt;&lt;p&gt;作为一个程序员时不时会看到和想到一些好的文章和观点，有时候还有些漂亮的代码段，想记录下来的方式很多，以前本人使用印象笔记来记录点滴。直到2017年初有了建立博客的想法，最开始自己想使用 Java web 来开发一个 Blog 以及后台管理，v1.0.0 版本也发布出来了，但是个人感觉丑死了，后台使用包 Bootstrap 还好一些，而且没有评论和计数的功能，所以就放弃使用了。后来在网上找了一些第三方的静态 Blog 搭建的方案，最后还是确定使用 Hexo 静态博客和 Next 主题来搭建。&lt;/p&gt;
    
    </summary>
    
      <category term="个人博客" scheme="https://www.corkercode.com/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://www.corkercode.com/tags/hexo/"/>
    
  </entry>
  
</feed>
